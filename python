import hashlib
import time
import requests
from bs4 import BeautifulSoup

import smtplib
import sys


CARRIERS = {
    "att": "@mms.att.net",
    "tmobile": "@tmomail.net",
    "verizon": "@vtext.com",
    "sprint": "@messaging.sprintpcs.com",
    "fi": "@msg.fi.google.com"
}

EMAIL = "kleiiatoh@gmail.com"
PASSWORD = "ejul mkve chkj kxln"

def send_message(phone_number, carrier, message):
    recipient = phone_number + CARRIERS[carrier]
    auth = (EMAIL, PASSWORD)

    server = smtplib.SMTP("smtp.gmail.com", 587)
    server.starttls()
    server.login(auth[0], auth[1])

    server.sendmail(auth[0], recipient, message)







def get_visible_text(url):
    """
    Fetches and extracts the visible text content of a webpage.

    :param url: URL of the webpage to fetch
    :return: Visible text content as a string
    """
    try:
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        soup = BeautifulSoup(response.text, "html.parser")

        # Remove scripts, styles, and other non-visible elements
        for tag in soup(["script", "style", "noscript"]):
            tag.decompose()

        return soup.get_text(separator=" ", strip=True)
    except requests.exceptions.RequestException as e:
        print(f"Error fetching the webpage: {e}")
        return None

def compute_hash(content):
    """
    Computes an MD5 hash of the given content.

    :param content: The content to hash
    :return: A hash string
    """
    return hashlib.md5(content.encode('utf-8')).hexdigest()

def monitor_webpage_text(url, check_interval):
    """
    Monitors a webpage for changes in visible text content.

    :param url: URL of the webpage to monitor
    :param check_interval: Time interval (in seconds) between checks
    """
    print(f"Starting to monitor {url} for text changes...")

    previous_hash = None

    while True:
        visible_text = get_visible_text(url)
        if visible_text is None:
            time.sleep(check_interval)
            continue

        current_hash = compute_hash(visible_text)

        if previous_hash and current_hash != previous_hash:
            print("The webpage text content has changed!")
            send_message("16692442254", 'fi', 'FRAMETIME')
        elif previous_hash:
            print("No change detected in text content.")
        else:
            print("Initial text content loaded.")

        previous_hash = current_hash
        time.sleep(check_interval)

if __name__ == "__main__":
    # Example usage
    url_to_monitor = "https://sites.google.com/student.fuhsd.org/bananaman/home"
    interval = int(input("Enter the check interval in seconds: "))

    monitor_webpage_text(url_to_monitor, interval)
